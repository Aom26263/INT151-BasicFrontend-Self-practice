//ChatGPT ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå
//1
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™ Car ‡∏£‡∏±‡∏ö brand, model, year, price
// ‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î showInfo() ‚Üí return string ‡πÄ‡∏ä‡πà‡∏ô "Brand: Honda, Model: Civic, Year: 2020, Price: 500000"
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™ Garage ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô array ‡∏ä‡∏∑‡πà‡∏≠ cars
// ‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î addCar(car) ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏à
// removeCar(brand, model) ‚Üí ‡∏•‡∏ö‡∏£‡∏ñ‡∏ï‡∏≤‡∏° brand + model
// listCars() ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ array ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "Brand Model"
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô findCarsByYear(garage, year) ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ array ‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏õ‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
// ‡πÉ‡∏ä‡πâ Destructuring ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ ‡πÉ‡∏ä‡πâ destructuring ‡πÄ‡∏≠‡∏≤ brand ‡∏Å‡∏±‡∏ö model ‡πÅ‡∏•‡πâ‡∏ß console.log ‡πÅ‡∏Ñ‡πà‡∏™‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á
// ‡πÄ‡∏û‡∏¥‡πà‡∏° Error Handling ‡∏ñ‡πâ‡∏≤ year < 2000 ‡∏´‡∏£‡∏∑‡∏≠ price <= 0 ‚Üí throw error

class Car {
    constructor(brand, model, year, price) {
        if (year < 2000) {
            throw new error("Year must be 2000 or higher");
        }
        if (price <= 0) {
            throw new error("Price must be 0 or higher");
        }
        this.brand = brand
        this.model = model
        this.year = year
        this.price = price
    }

    showInfo() {
        return `Brand: ${this.brand}, Model: ${this.model}, Year: ${this.year}, Price: ${this.price}`
    }
}

class Garage {
    constructor() {
        this.cars = []
    }

    addCar(car) {
        this.cars.push(car)
    }

    removeCar(brand, model) {
        this.cars = this.cars.filter(c => !(c.brand === brand && c.model === model))
    }

    listCars() {
        return this.cars.map(c => `${c.brand} ${c.model}`)
    }
}

function findCarsByYear(garage, year) {
    return garage.cars
    .filter(c => c.year === year)
    .map(c => `${c.brand} ${c.model}`);
}

// chat gpt ‡πÄ‡∏à‡∏ô‡∏°‡∏≤
// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
// ----------------------
try {
    const car1 = new Car("Honda", "Civic", 2020, 500000);
    const car2 = new Car("Toyota", "Corolla", 2018, 400000);
    // const car3 = new Car("Ford", "Fiesta", 1998, 150000); // ‚ùå error

    const garage = new Garage();
    garage.addCar(car1);
    garage.addCar(car2);

    console.log("üìå ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", garage.listCars());
    // => ["Honda Civic", "Toyota Corolla"]

    console.log("üìå ‡∏£‡∏ñ‡∏õ‡∏µ 2020:", findCarsByYear(garage, 2020));
    // => ["Honda Civic"]

    // ‡πÉ‡∏ä‡πâ Destructuring
    const { brand, model } = car2;
    console.log(`üìå Destructuring: ${brand} ${model}`); // "Toyota Corolla"

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÄ‡∏ï‡πá‡∏°
    console.log("\n=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÄ‡∏ï‡πá‡∏° ===");
    garage.cars.forEach(c => console.log(c.showInfo()));

    // ‡∏•‡∏ö‡∏£‡∏ñ Honda Civic
    garage.removeCar("Honda", "Civic");
    console.log("\nüìå ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö Honda Civic:", garage.listCars());
    // => ["Toyota Corolla"]

} catch (err) {
    console.error("Error:", err.message);
}

// ---------------------------------------------------------------------------------
//2
//‡∏ñ‡∏≤‡∏°chat‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
function shallowEquality(object1, object2) {
    const keys1=Object.keys(object1) // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ property ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á object1
    const keys2=Object.keys(object2) // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ property ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á object2

    if(keys1.length != keys2.length) {
        return false
    }
    for(let key of keys1) {
        if (object1[key] !== object2[key]) {
            return false
        }
    }
    return true
}

let book1 = {
    isbn: 123456789,
    title: "JavaScript"
}

let book2 = {
    isbn: 123456789,
    title: "JavaScript"
}

console.log(shallowEquality(book1, book2));